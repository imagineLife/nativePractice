{"id":"node_modules/@react-navigation/core/dist/utils/invariant.js","dependencies":[{"name":"/Users/Jake/Desktop/projects/nativePractice/todo/package.json","includedInParent":true,"mtime":1550318843000},{"name":"/Users/Jake/Desktop/projects/nativePractice/todo/.babelrc","includedInParent":true,"mtime":1550318529000},{"name":"/Users/Jake/Desktop/projects/nativePractice/todo/node_modules/@react-navigation/core/package.json","includedInParent":true,"mtime":1549937780000},{"name":"process","parent":"/Users/Jake/Desktop/projects/nativePractice/todo/node_modules/@react-navigation/core/dist/utils/invariant.js","resolved":"/Users/Jake/Desktop/projects/nativePractice/todo/node_modules/node-libs-browser/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\n'use strict';\n\n/* eslint-disable import/no-commonjs */\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function () {};\n\nif (process.env !== 'production') {\n  validateFormat = function (format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports = invariant;","map":{"mappings":[{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@react-navigation/core/dist/utils/invariant.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}}],"sources":{"node_modules/@react-navigation/core/dist/utils/invariant.js":"'use strict';\n\n/* eslint-disable import/no-commonjs */\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function () {};\n\nif (process.env !== 'production') {\n  validateFormat = function (format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports = invariant;"},"lineCount":48}},"hash":"791319921716a0f15381e9239e2da692","cacheData":{"env":{}}}